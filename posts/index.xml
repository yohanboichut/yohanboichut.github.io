<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sensibiliation aux concepts de programmation</title>
    <link>https://yohanboichut.github.io/posts/</link>
    <description>Recent content in Posts on Sensibiliation aux concepts de programmation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 Apr 2019 09:12:28 +0200</lastBuildDate>
    
	<atom:link href="https://yohanboichut.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test d&#39;intégration pour des applications JFx</title>
      <link>https://yohanboichut.github.io/posts/testfx-integration-test-post/</link>
      <pubDate>Mon, 01 Apr 2019 09:12:28 +0200</pubDate>
      
      <guid>https://yohanboichut.github.io/posts/testfx-integration-test-post/</guid>
      <description>Dans ce post, on s&amp;rsquo;intéresse à une façon d&amp;rsquo;organiser des tests fonctionnels qui peut être considérer ensuite comme des tests d&amp;rsquo;intégration. Effectivement, nous considérons une application JFx pour laquelle nous sommes amputés de la couche de service. Nous n&amp;rsquo;avons que l&amp;rsquo;API de cette couche. Évidemment, depuis l&amp;rsquo;avènement des mocks, à partir d&amp;rsquo;APIs, nous pouvons simuler ce que l&amp;rsquo;on veut presque comme l&amp;rsquo;on veut.
Nous définissons ici deux use-cases dans les méthodes de tests dans la classe MainTest.</description>
    </item>
    
  </channel>
</rss>